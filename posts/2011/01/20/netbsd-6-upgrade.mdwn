[[!meta  title="NetBSD-6: modules and system upgrades"]]
[[!meta  date="2011-01-20 20:53:58"]]
NetBSD 6 (which is right now at NetBSD-CURRENT version 5.99.44) will be the next release of the <a href="http://netbsd.org/">NetBSD</a> operating system. Among other <a href="http://www.netbsd.org/changes/changes-6.0.html">changes</a>, the kernel has been heavily <a href="http://www.feyrer.de/NetBSD/blog.html/nb_20090922_2256.html">modularized</a> for some architectures (including i386, but not amd64 &ndash; if you're on 64 bit Intel/AMD, this doesn't concern you (yet), on 32 bit Intel/AMD it does).

In practice, this especially means that your beloved GENERIC kernel won't be bootable in and of itself as it can't read ffs (or any other file system) unless it's modules are present and loaded. The modules are being installed with the userland via <code>./build.sh install=/</code>. The <a href="http://www.netbsd.org/docs/guide/en/index.html">NetBSD Guide</a> <a href="http://www.netbsd.org/docs/guide/en/chap-updating.html#updating-installing">demands</a> installing the userland only <em>after</em> you've booted into the new kernel. We have a problem here.

There are two possible ways out of this dilemma:
<ul>
	<li>build a MONOLITHIC kernel, boot it, install the userland and then re-boot into GENERIC</li>
	<li>install the modules separately from the rest of the userland</li>
</ul>

The procedure involving the MONOLITHIC (i.e. classic, non-modularized) kernel is described <a href="http://www.ezunix.org/index.php/Upgrade_monolithic_NetBSD_5.x_to_module_based_NetBSD_6.x">here</a>. I don't really like it because it involves building two kernels and rebooting twice. On the other hand, it's probably a good idea to keep a monolithic kernel around anyway, just in case anything goes wrong.

There is no simple <code>make installmodules</code> or <code>./build.sh installmodules=/</code> (yet?) but there is a workaround for that (credit goes <a href="http://www.feyrer.de/NetBSD/blog.html/nb_20091018_1917.html">here</a>): <code>make install USETOOLS=no DESTDIR=/</code> in <code>sys/modules</code>.

So here's the full procedure for upgrading either from NetBSD-5 or from NetBSD-CURRENT with an older kernel version to NetBSD-CURRENT.
<code>
# assuming your sources are in /usr/src and up to date
cd /usr/src
# build everything
./build.sh distribution kernel=GENERIC
# install the modules
cd sys/modules; make install USETOOLS=no DESTDIR=/; cd -
#save the old kernel
cp /netbsd /netbsd.`date +%Y%m%d`
#put the new kernel in place
cp obj/sys/arch/i386/compile/GENERIC/netbsd /netbsd
</code>
The next two steps only need to be done <em>once</em> when upgrading from monolithic to modularied kernels:
<code>
# update the boot loader
cp obj/sys/arch/i386/stand/boot/biosboot/boot /boot
# and configure it to load the root filesystem module
# modules for other filesystems will be loaded later automatically
echo "load=ffs" >> /boot.cfg
</code>
Back to the regular procedure:
<code>
#reboot
shutdown -r now "Kernel upgrade"
</code>
and after the reboot
<code>
cd /usr/src
./build.sh install=/
etcupdate -al
postinstall fix
</code>
as usual.

No guarantees of course, and this is work in progress. (Maybe) I'll update this post when I know more or things changed. Nudge me.

<strong>Update:</strong>

<a href="http://wiki.netbsd.org/users/asau/">asau</a> proposes building the sets and installing them:
<code>
# build everything and the sets 
./build.sh distribution kernel=GENERIC sets
# install the modules
cd /; pax -rzpe -f /usr/obj/releasedir/i386/binary/sets/modules.tgz
</code>
and after the reboot
<code>
cd /
# unpack everything except etc (will be handled by etcupdate) and modules (already done)
for m in base comp games man misc tests text; do 
pax -rzpe -f /usr/obj/releasdir/i386/binary/sets/${m}.tgz;
done
etcupdate -al -s /usr/obj/releasedir/i386/binary/sets/etc.tgz
</code>
Everything else just as above.

<strong>Update 2:</strong>

Shouldn't forget about <code>etcupdate</code> and <code>postinstall</code>.



[[!taglink  Allgemein]]